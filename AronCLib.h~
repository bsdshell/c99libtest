#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

/**
 @file

 @brief The library only use C standard library

 KEY: gcc -I$b/cpplib -o  /tmp/t  $b/cpp/AronCLibTest.c

*/

void ppp(const char * format, ... );


const int MAXDIGIT = 20;
const bool RUNTEST = false;

void ppp(const char * format, ... ){
    printf(format);
}

typedef struct GroupFloat {
    float data;
    int count;
} GroupFloat;

void myassert(bool predicate, char arr[]){
   if(!predicate) {
       printf("%s", arr);
       exit(1);
   }
}

int max(int a, int b){
    return a < b ? b : a;
}

int minInt(int a, int b){
    return a < b ? a : b;
}

int minLong(long a, long b){
    return a < b ? a : b;
}

/**
* \brief check whether pt is NULL.
*/
bool isNull1(void* pt){
    if(pt == NULL){
        printf("Pointer is NULL.\n");
        return true; 
    }
    return false;
}

int factorial(int n){
    if(n == 0)
        return 1;
    else
        return n*factorial(n-1);
}

bool notNull(void* pt){
    return !isNull1(pt);
}

void printArray(char* arr, int n){
    for(int i=0; i<n; i++)
        printf("[%c]", arr[i]);
}

void printArray(float* arr, int n){
    for(int i=0; i<n; i++)
        printf("[%f]", arr[i]);
}

int len(const char* s){
    return (int)strlen(s);
}

void plen(const char* msg, const char* s){
    printf("%s=%d\n", msg, len(s));
}


/**
 * \brief zero an array
 */
void zeroArrayInt(int* arr, const int n){
    for(int i=0; i<n; i++)
        arr[i] = 0;
}
void zeroArrayChar(char* arr, const int n){
    for(int i=0; i<n; i++)
        arr[i] = 0;
}

/**
 * \brief remove duplicate elements from char array, arr is modified
 * 
 */
void uniqueOrder(char* arr, int* n, const int NUM){
    int boolArr[NUM];
    int k = 0;
    int c = *n;
    zeroArrayInt(boolArr, NUM);
    for(int i=0; i<c; i++){
        int r = arr[i] % NUM;
        if(boolArr[r] == 0){
            boolArr[r] = 1;
            arr[k] = arr[i];
            k++;
        }
    }
    *n = k;
    arr[k] = '\0';
}

/**
 * \brief remove duplicate elements, oldPtr is not modified.
 * 
 * char* oldPtr = "abab"
 * char* newPtr = (char*) malloc((strlen(oldPtr)+1)*sizeof(char))
 * removeDuplicate(oldPtr, newPtr) => newPtr => "ab"
 * 
 */
void removeDuplicate(char* oldPtr, char* newPtr){
  char ascii[256];
  // initialize array to zero
  for(int i=0; i<256; i++)
    ascii[i] = -1;

  int k = 0;
  for(int i=0; i<strlen(oldPtr); i++){
    int inx = oldPtr[i];
    if(ascii[inx] == -1){
      newPtr[k] = inx;
       ascii[inx] = 1;
       k++;
    }
  }
  newPtr[k] = '\0';
}


/**
 * \brief remove index element from char*
    char arr[] = "abc";
    removeIndexChar(arr, 1) // => ac

    "ab" len = 2
    "b"
    "b\0"
    oldPtr = "b\0"
    --------------------------------------------------------------------------------
    NOTE: wrong way to use it. 
    char* arr = "abc";
    removeIndexChar(arr, 1) 
 */
void removeIndexChar(char arr[], int inx){
    int len = strlen(arr);
    if(inx < len){
        for(int i = 0; inx + i + 1 < len; i++){
            arr[inx + i] = arr[inx + i + 1];
        }
        arr[len - 1] = '\0';
    }
}

// 1 2 3 4
// 2 3 4
void dropChar(int n, char arr[]){
    myassert(n >= 0, "n can not be negative.");
    int len = strlen(arr);
    int diff = len - n;
    int i = 0;
    for(i=0; i<diff; i++)
        arr[i] = arr[i + n];
    if(i < len)
        arr[i] = '\0';
}

void takeChar(char arr[], const int n, char narr[]){
    int len = strlen(arr);
    int i = 0;
    for(i=0; i<minInt(n, len); i++)
        narr[i] = arr[i];
    narr[i] = '\0';
}

/**
 * \brief shift n pos to the left 
 *
 *  a % b = c 
 *  a = mb + c 
 *  if a < 0
 *  -a = -mb - c
 *  -a = (-m)b - c
 *
 *  3 % 4 = 3
 *  -3 % 4 = -3 + 4 % 4 = 1 => (4 - 1) = 3 
 * <file:///Users/cat/myfile/bitbucket/math/negative_modulo.pdf negative_modulo.pdf>
 */
void shiftLeftChar(char arr[], const int n){
    int len = strlen(arr);
    char* charPtr = (char*)malloc(sizeof(char)*(len + 1));
    if(charPtr){
        strncpy(charPtr, arr, len);
        charPtr[len] = '\0';
        for(int i=0; i<len; i++){
            // negative modulo
            arr[i - n < 0 ? len + ((i - n) % len) : (i - n) % len] = charPtr[i];  // right shift n pos
        }
        arr[len] = '\0';
        if(charPtr)
            free(charPtr);
    }
}

/**
 * \brief shift n pos to the right
 *
 */
void shiftRightChar(char arr[], const int n){
    int len = strlen(arr);
    char* charPtr = (char*)malloc(sizeof(char)*(len + 1));
    if(charPtr){
        strncpy(charPtr, arr, len);
        charPtr[len] = '\0';
        for(int i=0; i<len; i++)
            arr[(i + n) % len] = charPtr[i];  // right shift n pos
        arr[len] = '\0';
        if(charPtr)
            free(charPtr);
    }
}

// 5 - 1 - 3 =
// abc[3]
// de
// void concat(char arr1[], char arr2[], char arr3[]){
    // int len1 = strlen(arr1);
    // int len2 = strlen(arr2);
    // int sum = len1 + len2; 
    // for(int i=0; i<sum; i++){
        // if(i < len1)
            // arr3[i] = arr1[i];
        // else
            // arr3[i] = arr2[i - len1];
        
    // }
    // arr3[sum] = '\0';
    
// }


// char* allocateNChar(int n){
    // char* pt = (char*)malloc(sizeof(char)*n);
    // return pt;
// }
// void deallocateNChar(char*& pt){
    // if(pt)
        // free(pt);
// }


/**
* \brief check whether pt1 or pt2 is NULL.
*
*/
bool isNull2(void* pt1, void* pt2){
    if(pt1 == NULL || pt2 == NULL){
        printf("char* is NULL.\n");
        return true; 
    }
    return false;
}


/**
 * \brief return true if both strings are equals, otherwise return false.
 */
bool isEqualStr(const char* ptr1, const char* ptr2){
    return strcmp(ptr1, ptr2) == 0;
}

/*
* \brief Compare two char*, compare string
*
*  strcmp(const char* ptr1, const char* ptr2)
*  ret < 0, ret == 0, ret > 0 
*
* 
* return : true or false 
*/
bool cmpStr(char* pt1, char* pt2){
    bool ret = true;
    if(isNull2(pt1, pt2) == false){
        int len = strlen(pt1);
        if(strlen(pt1) == strlen(pt2)){
            for(int i=0; i<len && ret; i++){
                if(pt1[i] != pt2[i]){
                    ret = false;
                }
            }
        }else{
            ret = false;
        }
    }else{
        exit(1);
    }
    return ret;
}
bool cmpStrN(char* pt1, char* pt2, int len){
    bool ret = true;
    for(int i=0; i < len && ret; i++){
        if (pt1[i] != pt2[i]){
            ret = false;
        }
    }
    return ret;
}


// Compare an GroupFloat
bool isEqualGroupFloat(GroupFloat *pt1, GroupFloat* pt2){
    return pt1->data == pt2->data && pt1->count == pt2->count;
}

// Compare an array of GroupFloat
bool isEqualArrayGroupFloat(GroupFloat** pt1, GroupFloat** pt2, const int len){
    for(int i=0; i<len; i++){
        if(!isEqualGroupFloat(pt1[i], pt2[i]))
            return false;
    }
    return true;
}


// concat two char* 
void concat(const char *s1, const char *s2, char* result) {
    const size_t len1 = strlen(s1);
    const size_t len2 = strlen(s2);
    if(result != NULL){
        memcpy(result, s1, len1);
        memcpy(result + len1, s2, len2 + 1); // +1 to copy the null-terminator
    }
}

// Assume the result is large enough
void copyStrAt(char* result, const char* source, int startIndex){
    if(strlen(result) >= strlen(source) + startIndex){
        memcpy(result + startIndex, source, strlen(source)); // NOT copy null from source
    }else{
        ppp("strlen(result)=%lu\n", strlen(result));
        ppp("strlen(source)=%lu\n", strlen(source)); 
        ppp("startIndex=%d\n", startIndex); 
        exit(EXIT_FAILURE);
    }
}


// Extract temp value from each row
int extract_temperature(char* line, char c, char tmp[MAXDIGIT]) {
    int delCount = 0;
    int k = 0;
    for(int i=0; i<strlen(line); i++) {
        if(line[i] != c) {
            if(delCount == 1) {
                if(line[i] == '.' || ('0' <= line[i] && line[i] <= '9')) {
                    tmp[k] = line[i];
                    k++;
                }
            }
        } else {
            delCount++;
            if(delCount > 1) {
                tmp[k] = '\0';
                break;
            }
        }
    }
    return 0;
}

// Compare two float pt
bool cmp(float *a, float* b) {
    return *a <= *b ? true : false;
}

bool compareArrayPt(float** arr1, float** arr2, int len) {
    if(arr1 != NULL && arr2 != NULL) {
        for(int i=0; i<len; i++) {
            if(arr1[i] != NULL && arr2[i] != NULL && *arr1[i] != *arr2[i])
                return false;
        }
    }
    return true;
}

// Partition an array of "any type", with comparator
int partitionAny(void** ls, int (*cmp)(const void *, const void *), int lo, int hi) {
    const int len = hi - lo + 1;
    int i=0;
    int j=len - 1;
    int k=lo;
    void* arr[len];
    if(len > 1) {
        // Use last element as pivot
        void* pivot = ls[hi];
        // if i == j then, the i or j is pivot position
        while(i != j) {
            if(cmp(ls[k], pivot) <= 0) {
                arr[i] = ls[k];
                i++;
            } else {
                arr[j] = ls[k];
                j--;
            }
            k++;
        }
        arr[i] = pivot;

        for(int i=0; i<len; i++) {
            ls[lo+i] = arr[i];
        }
    }
    return (lo + i);
}


// partition an array of float, return a pivot index
int partition(float* ls, int lo, int hi) {
    const int len = hi - lo + 1;
    int i=0;
    int k=lo;
    int j=len - 1;
    float arr[len];
    if(len > 1) {
        // Use last element as pivot
        float pivot = ls[hi];
        // if i == j then, the spot is pivot position
        while(i != j) {
            if(ls[k] <= pivot) {
                arr[i] = ls[k];
                i++;
            } else {
                arr[j] = ls[k];
                j--;
            }
            k++;
        }
        arr[i] = pivot;

        for(int i=0; i<len; i++) {
            ls[lo+i] = arr[i];
        }
    }
    return k;
}

void quickSort(float *ls, int lo, int hi) {
    if ( lo < hi) {
        int p = partition(ls, lo, hi);
        quickSort(ls, lo, p-1);
        quickSort(ls, p+1, hi);
    }
}

float maxList(float* arr, int len){
    int lo = 0;
    int hi = len - 1;
    quickSort(arr, lo, hi);
    return arr[lo];
}

bool cmpFloat(const float* p1, const float* p2) {
    if(*p1 <= *p2)
        return true;
    else
        return false;
}

// Compare GroupFloat according to count
int cmpGroupFloat(const GroupFloat* p1, const GroupFloat* p2) {
    if (p1->count < p2->count)
        return -1;
    else if(p1 -> count > p2 -> count)
        return 1;
    else
        return 0;
}

int compare(const void *p1, const void *p2){
    GroupFloat*  gp1 = (GroupFloat*)p1;  // cast void* => GroupFloat*
    GroupFloat*  gp2 = (GroupFloat*)p2;  // cast void* => GroupFloat*
    if(gp1 -> count < gp2 -> count)
        return -1;
    else if(gp1 -> count > gp2 -> count)
        return 1;
    else
        return 0;
}

// Quicksort any array type with comparator
void quickSortAny(void** ls, int (*cmp)(const void*, const void*), int lo, int hi) {
    if ( lo < hi) {
        int p = partitionAny(ls, cmp, lo, hi);
        quickSortAny(ls, cmp, lo, p-1);
        quickSortAny(ls, cmp, p+1, hi);
    }
}

// Compare two array
bool compareArrayF(float* arr1, int len1, float* arr2, int len2) {
    if(arr1 != NULL && arr2 != NULL && len1 == len2) {
        for(int i=0; i<len1; i++) {
            if(arr1[i] != arr2[i])
                return false;
        }
    }
    return true;
}

bool compareArray(char* arr1, int len1, char* arr2, int len2) {
    if(notNull(arr1) && notNull(arr2) && len1 == len2) {
        for(int i=0; i<len1; i++) {
            if(arr1[i] != arr2[i])
                return false;
        }
    }
    return true;
}



float mean(float* arr, const unsigned int len) {
    if(len > 0) {
        float sum = 0.0;
        for(int i=0; i<len; i++)
            sum += arr[i];
        return sum/len;
    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}


float median(float* arr, const unsigned int len) {
    int lo = 0;
    int hi = len - 1;
    if(len > 0) {
        quickSort(arr, lo, hi);
        if(len % 2 == 1)
            return arr[(lo + hi)/2];
        else {
            int m = (lo + hi)/2;
            return (arr[m] + arr[m + 1])/2;
        }
    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}

// Group all continuous elements with counter
void group(float* arr, const unsigned int len, GroupFloat* tempInfo[], int* groupInx) {
    if(len > 0) {
        int max = 1;
        int count = 1;
        int tx = 0;
        tempInfo[tx]->data = arr[0];
        tempInfo[tx]->count = 1;

        for(int i=1; i<len; i++) {
            if(arr[i-1] == arr[i]) {
                count++;
            } else {
                // repeating count
                count = 1;
                // group
                tx++;
            }
            tempInfo[tx]->data = arr[i];
            tempInfo[tx]->count = count;
        }
        *groupInx = tx;
    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}

// Compute the most frequency of temprature.
void modeInfo(float* arr, const unsigned int len, GroupFloat** tempGroup, int* nGroup) {
    int lo = 0;
    int hi = len - 1;
    if(len > 0) {
        int groupInx = -1;
        quickSort(arr, lo, hi);
        group(arr, len, tempGroup, &groupInx);
        if(groupInx >= 0) {
            quickSortAny((void**)tempGroup, compare, lo, groupInx);
            *nGroup = groupInx + 1;
        }
    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}

/**
* Compute the most frequently occuring value
*
* tempGroup : Any array of GroupFloat
*
* nGroup : size of the array
*
* repeating : number of groups 
*
* result : console message 
* 
* msgLen : max length of "most frequently occuring value"
*
*/
void mode(GroupFloat** tempGroup, int nGroup, int* repeating, char* result, const int msgLen) {
    if(nGroup > 0){
        int repeatCount = 0;
        if(tempGroup[nGroup - 1]->count > 1){
            int last = nGroup - 1; 
            char strPt[msgLen];
            sprintf(strPt, "%2.3f K repeats %d times,", tempGroup[last]->data, tempGroup[last]->count);
            // concat(result, result, strPt);
            concat(strPt, result, result);
            int ix = last;
            repeatCount = 1;
            while(ix - 1 >= 0){
                if(ix - 1 >= 0 && tempGroup[last]->count == tempGroup[ix - 1]->count){
                    sprintf(strPt, "%2.3f K repeats %d times,", tempGroup[ix-1]->data, tempGroup[ix-1]->count);
                    // concat(result, result, strPt);
                    concat(strPt, result, result);
                    repeatCount++;
                }else{
                    result[strlen(result) - 1] = '.';
                    break;
                }
                ix--;
            }
        }else{
            // concat(result, "", "There is no repeating temperature.");
            concat("", "There is no repeating temperature.", result);
        }
        *repeating = repeatCount;

    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}

void min_max(float* arr, int len, float* min, float* max){
    int lo = 0;
    int hi = len - 1;
    quickSort(arr, lo, hi);
    *min = arr[lo];
    *max = arr[hi];
}

float standarddeviation(float* arr, int len, float mean) {
    if(len > 0) {
        float sum = 0.0;
        for(int i=0; i<len; i++) {
            sum += fabsf(arr[i] - mean)*fabsf(arr[i] - mean);
        }
        return sqrt(sum/len);
    } else {
        fprintf(stderr, "len can not be zero.\n");
        exit(EXIT_FAILURE);
    }
}


bool compareGroupFloat(GroupFloat g1, GroupFloat g2) {
    return g1.data == g2.data && g1.count == g2.count;
}

bool compareGroupFloatList(GroupFloat** g1, GroupFloat** g2, int len) {
    for(int i=0; i<len; i++) {
        if((g1[i] != NULL && g2[i] != NULL && g1[i]->data != g2[i]->data) || g1[i]->count != g2[i]->count)
            return false;
    }
    return true;
}

/*
* Count the number of rows in CSV file
*
* fname : input file name
*
* return : number of rows
*/
int line_count(char fname[40]) {
    FILE * fp;
    char * line = NULL;
    size_t len = 0;
    ssize_t read;

    fp = fopen(fname, "r");
    if (fp == NULL)
        exit(EXIT_FAILURE);

    float sum = 0.0;
    int nrow = 0;
    float* arr = (float*)malloc(sizeof(float)*nrow);
    int inx = 0;
    while ((read = getline(&line, &len, fp)) != -1) {
        char tmp[MAXDIGIT];
        extract_temperature(line, ',', tmp);
        if(strlen(tmp) > 0) {
            nrow++;
        }
    }


    if(fp != NULL)
        fclose(fp);
    if(line != NULL)
        free(line);
    if(arr != NULL)
        free(arr);

    return nrow;
}

/*
* Read file
*
* fname : file name
*
* arr : allocation memeory for temperature.
*
* nrow : size of arr
*
*/

void read_file(char fname[40], float* arr, int nrow) {
    FILE * fp;
    char * line = NULL;
    size_t len = 0;
    ssize_t read;

    fp = fopen(fname, "r");
    if (fp == NULL)
        exit(EXIT_FAILURE);

    float sum = 0.0;
    int k = 0;
    while ((read = getline(&line, &len, fp)) != -1) {
        char tmp[MAXDIGIT];
        extract_temperature(line, ',', tmp);
        if(strlen(tmp) > 0) {
            arr[k] = strtod(tmp, NULL);
            k++;
        }
    }
    if(fp != NULL)
        fclose(fp);
    if(line != NULL)
        free(line);
}

void repeat_c(int n, char c, char* result){
    for(int i=0; i < n; i++){
        result[i] = c;
    }
}


void summary(float mean, float median, char* mode, float max, float min, float stdev){
    printf("============================================================\n");
    printf("============================================================\n");
}
